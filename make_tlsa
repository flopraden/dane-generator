#!/usr/bin/python
import sys
import ssl
import binascii
import hashlib
import urllib2
import json
import contextlib

# reftype: 0 = plain cert, 1 = sha256, 2 = sha512
# certytype: 0 = CA pinning, 1 = cert pinning, 2 = self trusted CA, 3 = self trusted cert
# selector: 0 = full cert, 1 = SubjectPublicKeyInfo

def genTLSA(hostname, pemcert, port, proto, certtype=1, selector=0, reftype=1, compat=True):
    if not proto in ['tcp', 'udp']:
        raise ValueError("proto should be tcp or udp, nor %s" % proto)
    if not isinstance(port, int):
        raise ValueError("port should be int")
    # errors will be thrown already before we get here
    dercert = ssl.PEM_cert_to_DER_cert(pemcert)
    if not dercert:
        return

    if certtype not in [1, 3]:
        raise Exception("Only EE-cert supported right now")
    certhex = hashCert(reftype, dercert)
    if compat:
        # octet length is half of the string length; remember certtype and reftype are part of the length so +2
#        return "_443._tcp.%s IN TYPE65468 \# %s 0%s0%s%s"%(hostname, len(certhex)/2+2, certtype, reftype, certhex )
        return "_%s._%s.%s IN TYPE52 \# %s 0%s0%s0%s%s"%(port, proto, hostname, len(certhex)/2 +3, certtype, selector, reftype, certhex)
    else:
        return "_%s._%s.%s IN TLSA %s %s %s %s"%(port, proto, hostname, certtype, selector, reftype, certhex)

# take PEM encoded EE-cert and DER encode it, then sha256 it
def hashCert(reftype,certblob):
    if reftype == 0:
        return binascii.b2a_hex(certblob).upper()
    elif reftype == 1:
        hashobj = hashlib.sha256()
        hashobj.update(certblob)
    elif reftype == 2:
        hashobj = hashlib.sha512()
        hashobj.update(certblob)
    else:
        return 0
    return hashobj.hexdigest().upper()



def _generate_domain(data, domain):
    TLSAs = []
    services_definition = data[0]
    certificates = data[1].get(domain, {})
    for fqdn, params in certificates.items():
        for service in params["services"]:
            for port in services_definition[service]["ports"]:
                for cert in params["certs"]:
                    TLSAs.append(genTLSA('%s.' % fqdn, cert, port, services_definition[service]["transport"], certtype=3, selector=0, reftype=2, compat=True))
    return TLSAs


def generate_domain(servers, domain):
    TLSAs = []
    for server in servers:
        with contextlib.closing(urllib2.urlopen("http://%s:6204" % server)) as f:
            data = json.loads(f.read())
            TLSAs.extend(_generate_domain(data, domain))
    TLSAs.sort()
    return TLSAs


if __name__ == '__main__':
    data = []
    servers = ["10.7.0.1", "10.7.0.2", "10.7.0.4"]
    for domain in sys.argv[1:]:
        data.extend(generate_domain(servers, domain))
    print "\n".join(data)
